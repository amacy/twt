#!/usr/bin/env ruby
#  untitled
#
#  Created by Paolo Bosetti on 2009-12-03.
#  Copyright (c) 2009 University of Trento. All rights reserved.
#
require 'rubygems'
require "twitter"
require "optparse"
require "yaml"
require "pp"
require "json"

TWT_VERSION = "0.2.3"
VERSION_CHECK_PERIOD = 3600 * 24
PROGRAM_NAME = "Twt"
DATA_DIR = "#{ENV['HOME']}/.twitter"
AUTH_FILE = "cfg.yaml"
DEFAULT_COUNT = 10
DEFAULT_WIDTH = 80
COMMANDS = %w|logout post user friends mention delta reset queue dequeue deliver|
CTOKEN = "j70epTwp5ogCOPjVTtcYQ"
CSECRET = "IamMBM0F581hpOIsnnXt7exhGuHJCn3oP6F2SwOvI"

class OptsError < Exception; end
class CredentialsError < Exception; end

if RUBY_VERSION =~ /^1\.9/
  module Net
    module HTTPHeader
      def urlencode(str)
        str = str.to_s
        str.dup.force_encoding('ASCII-8BIT').gsub(/[^a-zA-Z0-9_\.\-]/){'%%%02x' % $&.ord}
      end
      private :urlencode
    end
  end
end

class String
  COLORS = {
    :off     => 0 ,    # Turn off all attributes
    :bright  => 1 ,    # Set bright mode
    :underline => 4 ,    # Set underline mode
    :blink   => 5 ,    # Set blink mode
    :inverse => 7 ,    # Exchange foreground and background colors
    :hide    => 8 ,    # Hide text (foreground color would be the same as background)
    :black   => 30,    # Black text
    :red     => 31,    # Red text
    :green   => 32,    # Green text
    :yellow  => 33,    # Yellow text
    :blue    => 34,    # Blue text
    :magenta => 35,    # Magenta text
    :cyan    => 36,    # Cyan text
    :white   => 37,    # White text
    :default => 39,    # Default text color
  }
  
  def color(fg, bg=nil)
    raise ArgumentError, "Wrong text color #{fg}" unless COLORS[fg]
    raise ArgumentError, "Wrong background color #{bg}" if bg and not COLORS[bg]
    return self if fg == :off or fg == :default
    bg_col = "\e[#{COLORS[bg]}m" if bg
    "\e[#{COLORS[fg]}m#{bg_col}#{self}\e[0m"
  end
  
  def partition(w)
    if self.length <= w
      return [self]
    else
      return [self[0...w], self[w..-1].partition(w)]
    end
  end
  
  def partition_by_words(width, color=:green)
    words = self.split("\s")
    result = []
    buffer = []
    words.each do |w|
      if (buffer*" ").length + w.length < width then
        w = w.color(color) if w =~ /@.*/
        w = w.color(:underline) if w =~ /(http)(s*):\/\//
        buffer << w
      else
        result << buffer * " "
        buffer = [w]
      end
    end
    result << buffer * " "
    return result
  end
  
end

def warn(string)
  super(string.color(:red))
end

class Twt
  attr_accessor :raw
  def initialize
    Dir.mkdir(DATA_DIR) unless File.directory?(DATA_DIR)
    begin
      @cfg = File.open("#{DATA_DIR}/#{AUTH_FILE}") { |file| YAML.load(file) } || Hash.new
    rescue
      @cfg = Hash.new
    end
    
    @count  = (@cfg[:count] || 0)
    @latest = (@cfg[:latest] || {})
    @color  = (@cfg[:color] || :default).to_sym
    @raw = false
  end
  
  def connect
    oauth = Twitter::OAuth.new(CTOKEN, CSECRET)
    if @cfg[:asecret] and @cfg[:atoken]
      oauth.authorize_from_access(@cfg[:atoken], @cfg[:asecret])
    else
      rtoken  = oauth.request_token.token
      rsecret = oauth.request_token.secret
     
      print "Redirecting you to twitter to authorize...\n"
      %x(open #{oauth.request_token.authorize_url})
     
      print "what was the PIN twitter provided you with?\n> "
      pin = STDIN.gets.chomp
      oauth.authorize_from_request(rtoken, rsecret, pin)
      self.config = {:atoken => oauth.access_token.token, :asecret => oauth.access_token.secret}
    end
    @client = Twitter::Base.new(oauth)
  end
  
  def config=(h)
    @cfg.merge!(h)
    File.open("#{DATA_DIR}/#{AUTH_FILE}", "w") { |file| 
      YAML.dump(@cfg, file)
    }
  end
  
  def config
    @cfg
  end
  
  def reset
    if File.exist?("#{DATA_DIR}/#{AUTH_FILE}") then
      File.unlink("#{DATA_DIR}/#{AUTH_FILE}")
    else
      warn "Already reset"
    end
  end
  
  def logout
    self.config = {:atoken=>nil,:asecret=>nil}
  end
  
  def query(kind, user=nil)
    puts "SHOWING LAST #{@count == 0 ? "UNREAD" : @count} #{kind.to_s.upcase} MESSAGES:"
    self.connect 
    actual_timeline = @client.method(kind.to_sym)
    call_arg = Hash.new
    if @cfg[:count] and @cfg[:count] > 0 then
      call_arg = {:count=>@count}
    elsif @latest[kind]
      call_arg = {:since_id=>@latest[kind]}
    end
    if user then
      call_arg[:id] = user
    end
    begin
      tweets = actual_timeline.call(call_arg).reverse
    rescue SocketError
      warn "Connection error. Perhaps you're not connected to the Internet?"
      return
    rescue
      warn "Unknown error during connection with Twitter. Error was:"
      puts $!
      return
    end
    tweets.each {|tweet|
      if @raw then
        pp tweet
      else
        @latest[kind.to_sym] = tweet.id
        time = DateTime.parse(tweet.created_at)
        if @cfg[:compact] then
          timeshort = time.strftime("%m%d%H%M")
          head = "#{tweet.user.screen_name.color(@color)}/#{timeshort} "
          indent = (tweet.user.screen_name.length+timeshort.length+2)          
        else
          timeshort = time.strftime("%m/%d %H:%M")
          head = "[#{tweet.user.screen_name.color(@color)} #{timeshort}] "
          indent = (tweet.user.screen_name.length+timeshort.length+4)
        end
        text = tweet.text.partition_by_words((@cfg[:width] || DEFAULT_WIDTH)-indent, @color)
        text = text*("\n"+" "*indent)
        puts "#{head}#{text}"
        puts if @cfg[:space]
      end
    }
    self.config = {:latest => @latest}
  end
  
  def post(msg)
    if msg.length >= 140 then
      msg = msg[0...-3]+"..."
      warn "your message has been shortened to 140 chars."
    end
    begin
      self.connect
      @client.update(msg)
      puts "Succesfully posted \"#{msg}\""
    rescue SocketError
      warn "Error posting your message. Perhaps you're not connected to the Internet?"
      queue = @cfg[:queue] || []
      queue << msg
      self.config = {:queue => queue}
      puts "Your message has been queued. Issue 'twt deliver' next time you go online"
    rescue
      warn "Unknown error during connection with Twitter. Error was:"
      puts $!
    end
  end
  
  def queue
    if @cfg[:queue] and not @cfg[:queue].empty?   
      @cfg[:queue].each_with_index do |m,i|
        puts "#{i}. #{m}"
      end
    else
      puts "Message queue is empty"
    end
  end
  
  def dequeue(list=[])
    if list.empty?
      self.config = {:queue => []} 
      puts "Message queue is now empty"
    else
      queue = @cfg[:queue] || []
      list.map! {|e| e.to_i}
      list.reject! {|i| i >= queue.length}
      self.config = {:queue => queue-queue.values_at(*list)}
      puts "Messages #{list * ", "} dequeued"
    end
  end
  
  def deliver
    begin
      self.connect
      @client.mentions
    rescue SocketError
      warn "Still not connected, unable to deliver. Messages remain in queue."
      return
    end
    if @cfg[:queue] and not @cfg[:queue].empty?
      puts "Delivering #{@cfg[:queue].length} queued messages:"
      @cfg[:queue].each_with_index do |m,i|
        print "message #{i}... "
        self.post m
        puts "sent"
      end
      self.dequeue
    else
      puts "Message queue is empty, cannot deliver"
    end
  end
  
  def delta
    self.connect
    previous_ids = @cfg[:followers] || []
    ids = @client.followers.map {|e| "@#{e.screen_name}: #{e.name}"}
    difference_plus  = ids - previous_ids
    difference_minus = previous_ids - ids
    puts "Last time followers: #{previous_ids.size}\nNow you have #{ids.size} follower(s)"
    print "New followers (#{difference_plus.size}):\n  "
    puts difference_plus.size > 0 ? difference_plus.sort * "\n  " : "none"
    print "Lost followers (#{difference_minus.size}):\n  "
    puts difference_minus.size > 0 ? difference_minus.sort * "\n  " : "none"
    self.config = {:followers => ids}
  end
  
  def check_version
    self.config = {:last_version_check => Time.now} unless @cfg[:last_version_check]
    if (Time.now - @cfg[:last_version_check]) > VERSION_CHECK_PERIOD
      gemcutter_response = Net::HTTP.get_response("rubygems.org","/api/v1/gems/twt.json")
      current_version = JSON.parse(gemcutter_response.body)["version"]
      must_upgrade = version_hash(current_version) > version_hash(TWT_VERSION)
      self.config = {:last_version_check => Time.now} unless must_upgrade
      return must_upgrade
    else
      return false
    end
  end
  
  def version_hash(string)
    c = string.split(".")
    return c[0]*10_000 + c[1]*100 + c[2]
  end
  private :version_hash
end

twt = Twt.new
opts = OptionParser.new
opts.banner = "Usage: twt [options] #{COMMANDS*'|'} [argument]\nOptions are:"

begin
  opts.on("-cCOUNT", "--count COUNT", "Messages to get (sticky)", Integer) {|v|
    twt.config = {:count => v}
  }
  opts.on("-wCOUNT", "--width COUNT", "Set message width (sticky)", Integer) {|v|
    twt.config = {:width => v}
  }
  opts.on("-r", "--raw", "Output raw data", TrueClass) {|v|
    twt.raw = v
  }
  opts.on("-s", "--space", "Toggle empty line between tweets (sticky)", TrueClass) {|v|
    twt.config = {:space => !twt.config[:space]}
  }
  opts.on("-p", "--compact", "Toggle compact heading (sticky)", TrueClass) {|v|
    twt.config = {:compact => !twt.config[:compact]}
  }
  opts.on("-kCOLOR", "--color COLOR", "Set color for user names (sticky)", String) {|v|
    if String::COLORS.include? v.to_sym
      twt.config = {:color => v}
    else
      warn "Supported colors are:\n#{String::COLORS.keys * ", "}.\nNo change has been made."
    end
  }
  opts.on("-v", "--version", "Print program version") {
    puts "twt version #{TWT_VERSION}"
    exit
  }
  
  rest = opts.parse ARGV
  CMD = rest.shift
  ARG = rest[0]
  raise OptsError unless COMMANDS.include?(CMD)
  
  if not File.exist?("#{DATA_DIR}/#{AUTH_FILE}") then
    puts "Welcome! you're using twt version #{TWT_VERSION}.\nPlease drop a tweet to @P4010 if you like it!"
  end

  case CMD
  when "logout"
    twt.logout
  when "post"
    twt.post(ARG)
  when "user"
    twt.query(:user_timeline, ARG)
  when "friends"
    twt.query(:friends_timeline)
  when "mention"
    twt.query(:mentions)
  when "dequeue"
    twt.dequeue(rest)
  else
    twt.send CMD if twt.respond_to? CMD
  end
  
  if twt.check_version then
    warn "New twt version is available.\nUpdate with \"gem update twt\""
  end
rescue OptsError
  warn "Must provide a command (either #{COMMANDS.inspect})"
  puts opts.to_s
  exit
rescue OptionParser::InvalidArgument
  warn "Invalid option argument"
  puts opts.to_s
  exit
rescue Twitter::Unauthorized
  warn "Invalid authentication. Login with twt login user:pass"
  exit
end
